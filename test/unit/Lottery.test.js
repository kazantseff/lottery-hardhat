const { expect, assert } = require("chai");
const { getNamedAccounts, deployments, ethers, network } = require("hardhat");
const { developmentChains } = require("../../helper-hardhat-config");

!developmentChains.includes(network.name) // We want this to run only on our local networks
  ? describe.skip
  : describe("Lottery", function() {
      let lottery;
      let deployer;
      const sendValue = ethers.utils.parseEther("1");

      beforeEach(async function() {
        deployer = (await getNamedAccounts()).deployer;
        await deployments.fixture(["all"]);
        lottery = await ethers.getContract("Lottery", deployer);
      });

      describe("constructor", function() {
        it("sets the owner of the contract correctly", async function() {
          const response = await lottery.getOwner();
          assert(response, deployer);
        });
      });

      describe("enterLottery", function() {
        it("sets the 'exist' status of an account correctly", async function() {
          await lottery.enterLottery({ value: sendValue });
          await expect(lottery.getStatus(deployer), true);
        });

        it("reverts when user does not deposit ETH", async function() {
          await expect(lottery.enterLottery()).to.be.revertedWith(
            "The minimum amount of deposit should be greater than 0."
          );
        });

        it("adds participant to participants array", async function() {
          await lottery.enterLottery({ value: sendValue });
          await expect(lottery.getAddress(0), deployer);
        });

        it("sets 'exist' status of an accounts to true", async function() {
          await lottery.enterLottery({ value: sendValue });
          const response = await lottery.getParticipant(deployer).exists;
          await expect(response, true);
        });

        it("sets the balance of an account correctly", async function() {
          await lottery.enterLottery({ value: sendValue });
          const response = await lottery.getParticipant(deployer).balance;
          await expect(response, sendValue);
        });

        it("sets the lottery number of a participant correctly", async function() {
          await lottery.enterLottery({ value: sendValue });
          const response = await lottery.getParticipant(deployer).lotteryNumber;
          await expect(response, lottery.getNumberOfParticipants());
        });
      });

      describe("rollAWinner", function() {
        it("allows only owner to roll a winner", async function() {
          const accounts = await ethers.getSigners();

          await expect(
            lottery
              .connect(accounts[1])
              .rollAWinner(lottery.getNumberOfParticipants())
          ).to.be.revertedWithCustomError(lottery, "Lottery__NotOwner");
        });

        it("reverts when there is not enought participants in", async function() {
          await expect(
            lottery.rollAWinner(lottery.getNumberOfParticipants())
          ).to.be.revertedWith(
            "Number of participants should be greater than 1"
          );
        });

        it("picks a correct winner", async function() {
          // Arrange
          const accounts = await ethers.getSigners();

          for (let i = 0; i < 5; i++) {
            await lottery
              .connect(accounts[i])
              .enterLottery({ value: sendValue });
          }

          // Getting the resuls of the rollAWinner function
          await lottery.rollAWinner(lottery.getNumberOfParticipants());

          // Here we want to check if the winnerNumber that was generated by the rollAWinner function
          // Is actually equals to the number our winner has, and this winner was generated by the same rollAWinner function
          await expect(
            lottery.getParticipant(lottery.getWinner()).lotteryNumber,
            lottery.getWinnerNumber()
          );
        });
      });

      describe("payOutWin", function() {
        let accounts;
        beforeEach(async function() {
          accounts = await ethers.getSigners();
          // This loop makes sure that deployer address is not participating in the lottery
          for (let i = 1; i < 5; i++) {
            await lottery
              .connect(accounts[i])
              .enterLottery({ value: sendValue });
          }
        });

        it("reverts when called not by the owner", async function() {
          await expect(
            lottery.connect(accounts[1]).payOutWin(deployer)
          ).to.be.revertedWithCustomError(lottery, "Lottery__NotOwner");
        });

        it("reverets when the arguments passed to the function is not a winner address", async function() {
          await lottery.rollAWinner(lottery.getNumberOfParticipants());
          // Here we are trying to pay out a win to the deployer
          // Which should fail because his address did not even participate
          await expect(
            lottery.payOutWin(deployer)
          ).to.be.revertedWithCustomError(lottery, "Lottery__NotAWinner");
        });

        it("transfers money to a winner", async function() {
          await lottery.rollAWinner(lottery.getNumberOfParticipants());
          const winner = await lottery.getWinner();

          const startingWinnerBalance = await lottery.provider.getBalance(
            winner
          );

          const startingLotteryBalance = await lottery.provider.getBalance(
            lottery.address
          );

          await lottery.payOutWin(winner);

          const endingLotteryBalance = await lottery.provider.getBalance(
            lottery.address
          );

          const endingWinnerBalance = await lottery.provider.getBalance(winner);

          assert.equal(endingLotteryBalance, 0);
          assert.equal(
            startingLotteryBalance.add(startingWinnerBalance).toString(),
            endingWinnerBalance.toString()
          );
        });

        it("restars lottery and clears participants array", async function() {
          await lottery.rollAWinner(lottery.getNumberOfParticipants());
          const winner = await lottery.getWinner();
          await lottery.payOutWin(winner);

          for (let i = 1; i < 5; i++) {
            await expect(lottery.getParticipant(accounts[i]).exists == false);
          }

          await expect(lottery.getAddress(0), null);
        });
      });
    });
